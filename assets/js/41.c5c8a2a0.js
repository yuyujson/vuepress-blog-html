(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{559:function(t,s,a){"use strict";a.r(s);var e=a(29),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("blockquote",[a("p",[t._v("由于公司的代码不方便分享, 本篇只提供大致思路")])]),t._v(" "),a("p",[t._v("Curator是Netflix公司开源的一套zookeeper客户端框架，解决了很多Zookeeper客户端非常底层的细节开发工作，包括连接重连、反复注册Watcher和NodeExistsException异常等等。Patrixck Hunt（Zookeeper）以一句“Guava is to Java that Curator to Zookeeper”给Curator予高度评价。本篇主要使用到curator中的"),a("code",[t._v("InterProcessMutex")]),t._v("类进行加锁解锁操作, "),a("code",[t._v("InterProcessMutex")]),t._v(" 具体原理及使用方法请自行百度")]),t._v(" "),a("h2",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[t._v("#")]),t._v(" 目标")]),t._v(" "),a("ol",[a("li",[t._v("提供注解及内部类两种方式进行加锁")]),t._v(" "),a("li",[t._v("两种加锁方式内部实现保持一致, 尽可能使用同一套代码, 方便后期维护")]),t._v(" "),a("li",[t._v("注解方式支持sel表达式")]),t._v(" "),a("li",[t._v("内部类方式采用类似于"),a("code",[t._v("TransactionTemplate")]),t._v(" 方式注入后进行使用")]),t._v(" "),a("li",[t._v("尽可能支持多种锁类型(公平锁, 读写锁), 默认为公平锁")]),t._v(" "),a("li",[t._v("支持自定义加锁超时策略, 并提供默认超时策略")]),t._v(" "),a("li",[t._v("该代码为框架代码, 需保持导入简单, 最好进行maven引用后, 只需要配置zk链接地址就可以正常使用")])]),t._v(" "),a("h2",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("h3",{attrs:{id:"锁主体逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁主体逻辑"}},[t._v("#")]),t._v(" 锁主体逻辑")]),t._v(" "),a("p",[t._v("通过源码可知读写锁的实现是对 "),a("code",[t._v("InterProcessMutex")]),t._v("  的子类, 具体的加锁解锁方法和公平锁是一致的,")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMutex")]),t._v(" fair "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMutex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FAIR_ROOT_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lockValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMutex")]),t._v(" read "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessReadWriteLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" READ_WRITE_ROOT_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lockValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMutex")]),t._v(" write "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessReadWriteLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" READ_WRITE_ROOT_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lockValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("我们可以将加锁解锁的方法都写在抽象类中"),a("code",[t._v("AbsLock")]),t._v(" , 通过子类来实现"),a("code",[t._v("InterProcessMutex")]),t._v(" 的初始化, 同时加入工厂模式, 依据传入的枚举类型来确定锁的前缀及锁类型, 这样在注解及内部类都可以调用"),a("code",[t._v("AbsLock")]),t._v("来进行加锁解锁")]),t._v(" "),a("h3",{attrs:{id:"锁超时策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁超时策略"}},[t._v("#")]),t._v(" 锁超时策略")]),t._v(" "),a("p",[t._v("锁超时策略可以通过接口方式传入内部类执行器中, 具体的策略可以保证自定义")]),t._v(" "),a("h3",{attrs:{id:"类扫描问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类扫描问题"}},[t._v("#")]),t._v(" 类扫描问题")]),t._v(" "),a("p",[t._v("把需要扫描的类配置到 "),a("code",[t._v("src/main/resources/META-INF/spring.factories")]),t._v(" 文件中, 使项目引用后可以直接扫描到")]),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("其实整体实现很简单, 但是还是有很多的细节在里面, 整体写完后会对自己框架设计上有很大的启发")])])}),[],!1,null,null,null);s.default=r.exports}}]);