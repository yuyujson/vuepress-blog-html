(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{527:function(t,e,a){"use strict";a.r(e);var n=a(29),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"锁机制有如下两种特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁机制有如下两种特性"}},[t._v("#")]),t._v(" 锁机制有如下两种特性：")]),t._v(" "),a("ol",[a("li",[t._v("互斥性：即在同一时间只允许一个线程持有某个对象锁，通过这种特性来实现多线程中的协调机制，这样在同一时间只有一个线程对需同步的代码块(复合操作)进行访问。互斥性我们也往往称为操作的原子性。")]),t._v(" "),a("li",[t._v("可见性：必须确保在锁被释放之前，对共享变量所做的修改，对于随后获得该锁的另一个线程是可见的（即在获得锁时应获得最新共享变量的值），否则另一个线程可能是在本地缓存的某个副本上继续操作从而引起不一致。")])]),t._v(" "),a("h2",{attrs:{id:"synchronized-的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-的用法"}},[t._v("#")]),t._v(" Synchronized 的用法")]),t._v(" "),a("table",[a("tr",[a("td",[t._v("分类")]),a("td",[t._v("具体分类")]),a("td",[t._v("被锁对象")]),a("td",[t._v("举例")])]),a("tr",[a("td",{attrs:{rowspan:"2"}},[t._v("方法")]),a("td",[t._v("方法")]),a("td",[t._v("当前类的实例对象")]),a("td",[t._v(" public Synchronized void test() { }")])]),a("tr",[a("td",[t._v("静态方法")]),a("td",[t._v("类对象")]),a("td",[t._v(" public static Synchronized void test() { }")])]),a("tr",[a("td",{attrs:{rowspan:"3",colspan:"2"}},[t._v("代码块")]),a("td",[t._v("当前类的实例对象")]),a("td",[t._v(" public void test() { Synchronized (this){ } }")])]),a("tr",[a("td",[t._v("class对象")]),a("td",[t._v(" public void test() { Synchronized (Test.getClass()){ } }")])]),a("tr",[a("td",[t._v("任意实例对象")]),a("td",[t._v(" private Object lock = new Object(); public void test() { Synchronized (lock){ } }")])])]),t._v(" "),a("h2",{attrs:{id:"锁对象的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁对象的分类"}},[t._v("#")]),t._v(" 锁对象的分类")]),t._v(" "),a("ol",[a("li",[t._v("对象锁")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果对class文件进行反编译可以看到,对象在执行时首先要先执行monitorenter指令，退出的时候monitorexit指令。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("类锁")])]),t._v(" "),a("blockquote",[a("p",[t._v("在 Java 中，针对每个类也有一个锁，可以称为“类锁”，类锁实际上是通过对象锁实现的，即类的 Class 对象锁。每个类只有一个 Class 对象，所以每个类只有一个类锁。")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"同步代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步代码块"}},[t._v("#")]),t._v(" 同步代码块")]),t._v(" "),a("h3",{attrs:{id:"对象锁执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象锁执行流程"}},[t._v("#")]),t._v(" 对象锁执行流程")]),t._v(" "),a("p",[t._v("在对带有 "),a("code",[t._v("Synchronized")]),t._v(" 锁的类的class文件进行反编译后可以得到带有下方关键字的流程")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("...\nmonitorenter  //进入同步方法\n...\nmonitorexit   //退出同步方法\n...\nmonitorexit // 退出同步方法(相当于finally)\n...\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("其中 "),a("code",[t._v("monitorenter")]),t._v(" 指令指向同步代码块的开始位置，"),a("code",[t._v("monitorexit")]),t._v(" 指令则指明同步代码块的结束位置, 当执行 "),a("code",[t._v("monitorenter")]),t._v(" 指令时，当前线程将试图获取 "),a("strong",[t._v("对象锁")]),t._v(" 所对应的 monitor 的持有权，当 "),a("strong",[t._v("对象锁")]),t._v(" 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。如果当前线程已经拥有 "),a("strong",[t._v("对象锁")]),t._v(" 的 monitor 的持有权，那它可以重入这个 monitor，重入时计数器的值也会加 1。倘若其他线程已经拥有 "),a("strong",[t._v("对象锁")]),t._v(" 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即 "),a("code",[t._v("monitorexit")]),t._v("指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。")]),t._v(" "),a("p",[t._v("值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 "),a("code",[t._v("monitorenter")]),t._v(" 指令都有执行其对应 "),a("code",[t._v("monitorexit")]),t._v(" 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 "),a("code",[t._v("monitorenter")]),t._v(" 和 "),a("code",[t._v("monitorexit")]),t._v(" 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 "),a("code",[t._v("monitorexit")]),t._v(" 指令。从字节码中也可以看出多了一个"),a("code",[t._v("monitorexit")]),t._v("指令，它就是异常结束时被执行的释放monitor 的指令。")]),t._v(" "),a("p",[t._v("锁的重入性: 即在同一锁程中，线程不需要再次获取同一把锁。"),a("code",[t._v("Synchronized")]),t._v("先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。")]),t._v(" "),a("h3",{attrs:{id:"对象在堆内存的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象在堆内存的结构"}},[t._v("#")]),t._v(" 对象在堆内存的结构")]),t._v(" "),a("p",[t._v("在JVM中，对象在内存中的布局分为三块区域：对象头、实例数据和填充数据")]),t._v(" "),a("ol",[a("li",[t._v("实例变量：存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。")]),t._v(" "),a("li",[t._v("填充数据：由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。")]),t._v(" "),a("li",[t._v("对象头,采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由Mark Word 和 Class Metadata Address 组成")])]),t._v(" "),a("h3",{attrs:{id:"对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象头"}},[t._v("#")]),t._v(" 对象头")]),t._v(" "),a("p",[t._v("它实现"),a("code",[t._v("Synchronized")]),t._v("的锁对象的基础，这点我们重点分析它，一般而言，"),a("code",[t._v("Synchronized")]),t._v("使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由Mark Word 和 Class Metadata Address 组成，其结构说明如下表：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("虚拟机位数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("头对象结构")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("32/64bit")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Mark Word")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("存储对象的hashCode、锁信息或分代年龄或GC标志等信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("32/64bit")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Class Metadata Address")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例。")])])])]),t._v(" "),a("p",[t._v("其中Mark Word在默认情况下存储着对象的HashCode、分代年龄、锁标记位等以下是32位JVM的Mark Word默认存储结构")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("锁状态")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("25bit")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("4bit")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("1bit是否是偏向锁")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("2bit 锁标志位")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("无锁状态")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对象HashCode")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对象分代年龄")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("01")])])])]),t._v(" "),a("p",[t._v("由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到JVM的空间效率，Mark Word 被设计成为一个非固定的数据结构，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间，如32位JVM下，除了上述列出的Mark Word默认存储结构外，还有如下可能变化的结构：")]),t._v(" "),a("table",[a("tr",[a("td",{attrs:{rowspan:"2"}},[t._v("锁状态")]),a("td",{attrs:{colspan:"2"}},[t._v("25bit")]),a("td",{attrs:{rowspan:"2"}},[t._v("4bit")]),a("td",[t._v("1bit")]),a("td",[t._v("2bit")])]),a("tr",[a("td",[t._v("23bit")]),a("td",[t._v("2bit")]),a("td",[t._v("是否偏向锁")]),a("td",[t._v("锁标志位")])]),a("tr",[a("td",[t._v("无锁状态")]),a("td",{attrs:{colspan:"2"}},[t._v("对象的hashCode")]),a("td",[t._v("对象分代年龄")]),a("td",[t._v("0")]),a("td",[t._v("01")])]),a("tr",[a("td",[t._v("轻量级锁")]),a("td",{attrs:{colspan:"4"}},[t._v("指向栈中锁记录的指针")]),a("td",[t._v("00")])]),a("tr",[a("td",[t._v("重量级锁")]),a("td",{attrs:{colspan:"4"}},[t._v("指向互斥量(重量级锁)的指针")]),a("td",[t._v("10")])]),a("tr",[a("td",[t._v("GC标记")]),a("td",{attrs:{colspan:"4"}},[t._v("空")]),a("td",[t._v("11")])]),a("tr")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"同步方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步方法"}},[t._v("#")]),t._v(" 同步方法")]),t._v(" "),a("h3",{attrs:{id:"同步方法执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步方法执行流程"}},[t._v("#")]),t._v(" 同步方法执行流程")]),t._v(" "),a("p",[t._v("在对带有 "),a("code",[t._v("Synchronized")]),t._v(" 锁方法的class文件进行反编译后可以得到带有下方关键字")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  //==================syncTask方法======================\n  public Synchronized void syncTask();\n    descriptor: ()V\n    //方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED`指明该方法为同步方法\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=3, locals=1, args_size=1\n         0: aload_0\n         1: dup\n         2: getfield      #2                  // Field i:I\n         5: iconst_1\n         6: iadd\n         7: putfield      #2                  // Field i:I\n        10: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 10\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("方法级的同步是隐式，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 ACC_SYNCHRONIZED 访问标志区分一个方法是否同步方法。当方法调用时，调用指令将会 检查方法的 ACC_"),a("code",[t._v("Synchronized")]),t._v(" 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。如果一个同步方法执行期间抛 出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放")]),t._v(" "),a("h3",{attrs:{id:"同步方法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步方法原理"}},[t._v("#")]),t._v(" 同步方法原理")]),t._v(" "),a("p",[t._v("从字节码中可以看出，"),a("code",[t._v("Synchronized")]),t._v("修饰的方法并没有monitorenter指令和monitorexit指令，取得代之的确实是ACC_"),a("code",[t._v("Synchronized")]),t._v("标识，该标识指明了该方法是一个同步方法，JVM通过该ACC_"),a("code",[t._v("Synchronized")]),t._v("访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。这便是"),a("code",[t._v("Synchronized")]),t._v("锁在同步代码块和同步方法上实现的基本原理。同时我们还必须注意到的是在Java早期版本中，"),a("code",[t._v("Synchronized")]),t._v("属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的"),a("code",[t._v("Synchronized")]),t._v("效率低的原因。不过Java 6之后Java官方对从JVM层面对"),a("code",[t._v("Synchronized")]),t._v("较大优化.")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"锁的升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的升级"}},[t._v("#")]),t._v(" 锁的升级")]),t._v(" "),a("ol",[a("li",[t._v("无锁状态:没有加锁")]),t._v(" "),a("li",[t._v("偏向锁：在对象第一次被某一线程占有的时候，是否偏向锁置1，锁表01，写入线程号，当其他的线程访问的时候->竞争->失败->轻量级锁\n"),a("ol",[a("li",[t._v("第一次占有它的线程获取几率会比较大")]),t._v(" "),a("li",[t._v("CAS算法 campany and set（CAS）")]),t._v(" "),a("li",[t._v("无锁状态时间非常接近")]),t._v(" "),a("li",[t._v("竞争不激烈的时候适用")])])]),t._v(" "),a("li",[t._v("轻量级锁：线程有交替适用，互斥性不是很强, CAS失败, 00")]),t._v(" "),a("li",[t._v("自旋锁：竞争失败的时候，不是马上转化级别，而是执行几次空循环5 10")]),t._v(" "),a("li",[t._v("重量级锁：强互斥, 等待时间长, 10\n"),a("ol",[a("li",[t._v("重量级锁也就是通常说"),a("code",[t._v("Synchronized")]),t._v("的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，(位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）")])])]),t._v(" "),a("li",[t._v("锁消除：JIT在编译的时候通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"使用注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用注意事项"}},[t._v("#")]),t._v(" 使用注意事项")]),t._v(" "),a("ol",[a("li",[t._v("与moniter关联的对象不能为空")]),t._v(" "),a("li",[t._v("多个锁的交叉导致死锁")])]),t._v(" "),a("blockquote",[a("p",[t._v("参考: "),a("a",{attrs:{href:"https://blog.csdn.net/javazejian/article/details/72828483",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解Java并发之 Synchronized 实现原理"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);