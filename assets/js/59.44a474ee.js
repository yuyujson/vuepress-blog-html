(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{577:function(e,r,o){"use strict";o.r(r);var v=o(29),_=Object(v.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"是什么"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[e._v("#")]),e._v(" 是什么")]),e._v(" "),o("p",[e._v("zookeeper是由雅虎创建的一个开源的分布式协调服务, 它是一个典型的分布式数据一致性解决方案, 分布式程序可以基于它实现入数据发布/订阅、负载均衡、命名服务、集群管理、master选举、分布式锁/列队等功能")]),e._v(" "),o("h2",{attrs:{id:"特性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" 特性")]),e._v(" "),o("h3",{attrs:{id:"保证分布式的一致性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#保证分布式的一致性"}},[e._v("#")]),e._v(" 保证分布式的一致性")]),e._v(" "),o("ol",[o("li",[e._v("顺序一致性\n"),o("ol",[o("li",[e._v("从同一个客户端发起的事物请求,最终会严格的按照其发起顺序被应用到zookeeper中")])])]),e._v(" "),o("li",[e._v("原子性\n"),o("ol",[o("li",[e._v("zookeeper中所有的事物请求具有原子性")])])]),e._v(" "),o("li",[e._v("单一视图\n"),o("ol",[o("li",[e._v("客户端无论链接哪个zookeeper服务,看到的数据都是一致的")])])]),e._v(" "),o("li",[e._v("可靠性")]),e._v(" "),o("li",[e._v("实时性\n"),o("ol",[o("li",[e._v("zookeeper仅仅能在一定的时间内客户端最终一定能够从服务器上读取到最新的数据")])])])]),e._v(" "),o("h3",{attrs:{id:"可以构建集群"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#可以构建集群"}},[e._v("#")]),e._v(" 可以构建集群")]),e._v(" "),o("p",[e._v("一般3-5台机器就可以组成一个可用zookeeper集群,每台机器都会维护当前的服务状态, 并且每台机器之间都互相保持着通信, 只要集群中超过一般的机器能够正常工作, 那么整个集群就能正常对外服务")]),e._v(" "),o("h3",{attrs:{id:"顺序访问"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#顺序访问"}},[e._v("#")]),e._v(" 顺序访问")]),e._v(" "),o("p",[e._v("对于客户端的每个更新请求, zookeeper都会分配全局唯一的递增编号, 这个编号反映了所有实务操作的先后顺序")]),e._v(" "),o("h3",{attrs:{id:"高性能"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#高性能"}},[e._v("#")]),e._v(" 高性能")]),e._v(" "),o("p",[e._v("由于zookeeper将全量数据存储在内存中, 并直接服务于客户端的所有非事物请求, 因此它尤其适用于以读操作为主的应用场景")]),e._v(" "),o("h2",{attrs:{id:"基本概念"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),o("p",[e._v("在在分布式系统中, 构成集群的每一台机器都有自己的角色. zookeeper引入了 "),o("code",[e._v("leader")]),e._v("(领导)、"),o("code",[e._v("follower")]),e._v("(跟随者) 和 "),o("code",[e._v("observer")]),e._v("(观察者)三种角色. zookeeper集群中的所有机器通过一个leader选举过程来选定一台leader机器, leader服务器为客户端提供读和写服务. 除leader外, 其他机器也可以额为客户端提供读和写服务.唯一的区别在于:observer机器不能参与leader选举的过程, 也不参与"),o("code",[e._v("写操作的过半写成功")]),e._v("策略, 因此observer可以在不影响写性能的情况下提升集群的读性能")]),e._v(" "),o("p",[e._v("数据节点(znode)")]),e._v(" "),o("p",[e._v("zookeeper中的节点分为两类, 第一类指的是构成集群的机器, 我们称之为机器节点;第二类则是指数据莫O型中的数据单元, 我们诚挚为数据节点(znode)/ zookeeper将所有数据存储在内存中, 数据模型是一棵树(zNode tree), 由斜杠/隽星分隔的路径就是一个znode.每个znode上都会保存自己的数据内容,同事还会保存一系列属性信息")]),e._v(" "),o("p",[e._v("znode分为持久节点和临时节点两类.")]),e._v(" "),o("ol",[o("li",[e._v("持久节点: 一旦这个znode被创建了, 除非主动进行znode移除操作, 否则这个znode将会一直保存在zookeeper上")]),e._v(" "),o("li",[e._v("临时节点: 声明周期和客户端会话绑定, 一旦客户端会话失效,那么这个客户端创建的所有临时节点都会被移除.")])]),e._v(" "),o("p",[e._v("事件监听器(watcher)")]),e._v(" "),o("p",[e._v("watcher是zookeeper中的一个很重要的特性. zookeeper允许用户在指定节点上注册一些watcher, 并且在一些特定的事件触发的时候,zookeeper服务端会将时间通知到感兴趣的客户端")]),e._v(" "),o("p",[e._v("acl")]),e._v(" "),o("p",[e._v("zookeeper采用acl(access control lists)策略来进行权限控制, 类似于unix的权限控制")])])}),[],!1,null,null,null);r.default=_.exports}}]);