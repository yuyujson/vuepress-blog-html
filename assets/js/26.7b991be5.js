(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{544:function(e,n,t){"use strict";t.r(n);var s=t(29),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"beandefinition加载、解析、处理、注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition加载、解析、处理、注册"}},[e._v("#")]),e._v(" BeanDefinition加载、解析、处理、注册")]),e._v(" "),t("blockquote",[t("p",[e._v("前言: IOC的Bean从xml中进行解析到注册到IOC容器中, 之前只知道容器的加载流程,具体实现却一直模糊.今天正好追了源代码并记录下来\n")])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"简单的注册代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的注册代码"}},[e._v("#")]),e._v(" 简单的注册代码")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 获取资源\nClassPathResource resource = new ClassPathResource("org/springframework/beans/factory/xml/test.xml"); // <1>\n// 获取 BeanFactory\nDefaultListableBeanFactory factory = new DefaultListableBeanFactory();\n// 根据新建的 BeanFactory 创建一个 BeanDefinitionReader 对象，该 Reader 对象为资源的解析器\nXmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory); \n// 装载资源\nreader.loadBeanDefinitions(resource); \n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("这段代码包含了spring对加载、解析、处理、注册的全部流程")]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"reader-loadbeandefinitions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reader-loadbeandefinitions"}},[e._v("#")]),e._v(" reader.loadBeanDefinitions()")]),e._v(" "),t("p",[e._v("前三段代码是一个获取资源输入流及准备的过程, 从装在资源的位置开始")]),e._v(" "),t("ol",[t("li",[e._v("方法点进来可以看到对"),t("code",[e._v("resource")]),e._v("又一次进行了包装,"),t("code",[e._v("**EncodedResource**")]),e._v("增加了编码格式, 可以防止乱码")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/yuyujson/cdn-images@latest/blog-images/20210214154337.png",alt:"image.png"}})]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("这段方法就是一个验证然后调用下一层方法")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\tpublic int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {\n\t\tAssert.notNull(encodedResource, "EncodedResource must not be null");\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace("Loading XML bean definitions from " + encodedResource);\n\t\t}\n\n        // 获取已经加载过的资源\n\t\tSet<EncodedResource> currentResources = this.resourcesCurrentlyBeingLoaded.get();\n\t\tif (currentResources == null) {\n\t\t\tcurrentResources = new HashSet<>(4);\n\t\t\tthis.resourcesCurrentlyBeingLoaded.set(currentResources);\n\t\t}\n\t\tif (!currentResources.add(encodedResource)) { // 将当前资源加入记录中。如果已存在，抛出异常\n\t\t\tthrow new BeanDefinitionStoreException("Detected cyclic loading of " + encodedResource + " - check your import definitions!");\n\t\t}\n\t\ttry {\n            // 从 EncodedResource 获取封装的 Resource ，并从 Resource 中获取其中的 InputStream\n\t\t\tInputStream inputStream = encodedResource.getResource().getInputStream();\n\t\t\ttry {\n\t\t\t\tInputSource inputSource = new InputSource(inputStream);\n\t\t\t\tif (encodedResource.getEncoding() != null) { // 设置编码\n\t\t\t\t\tinputSource.setEncoding(encodedResource.getEncoding());\n\t\t\t\t}\n                // 核心逻辑部分，执行加载 BeanDefinition\n                ※※※※※※※※※※※\n\t\t\t\treturn doLoadBeanDefinitions(inputSource, encodedResource.getResource());\n\t\t\t\t※※※※※※※※※※※\n            } finally {\n\t\t\t\tinputStream.close();\n\t\t\t}\n\t\t} catch (IOException ex) {\n\t\t\tthrow new BeanDefinitionStoreException("IOException parsing XML document from " + encodedResource.getResource(), ex);\n\t\t} finally {\n            // 从缓存中剔除该资源\n\t\t\tcurrentResources.remove(encodedResource);\n\t\t\tif (currentResources.isEmpty()) {\n\t\t\t\tthis.resourcesCurrentlyBeingLoaded.remove();\n\t\t\t}\n\t\t}\n\t}\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("doLoadBeanDefinitions() 方法获取document,实例然后根据 Document 实例，注册 Bean 信息")]),e._v(" "),t("li",[e._v("registerBeanDefinitions() 创建XmlReaderContext 进行注册")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\tpublic int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException {\n\t    // 创建 BeanDefinitionDocumentReader 对象\n\t\tBeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();\n\t\t// 获取已注册的 BeanDefinition 数量\n\t\tint countBefore = getRegistry().getBeanDefinitionCount();\n\t\t// 创建 XmlReaderContext 对象\n\t\t// 注册 BeanDefinition\n\t\tdocumentReader.registerBeanDefinitions(doc, createReaderContext(resource));\n\t\t// 计算新注册的 BeanDefinition 数量\n\t\treturn getRegistry().getBeanDefinitionCount() - countBefore;\n\t}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions")])]),e._v(" "),t("p",[e._v("点了这么久终于到了真正重要的地方")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 解析前处理\npreProcessXml(root);\n// 解析\nparseBeanDefinitions(root, this.delegate);\n// 解析后处理\npostProcessXml(root);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("parseBeanDefinitions(root, this.delegate)再次点进来")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\tprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n\t    // 进行 bean 元素解析。\n        // 如果解析成功，则返回 BeanDefinitionHolder 对象。而 BeanDefinitionHolder 为 name 和 alias 的 BeanDefinition 对象\n        // 如果解析失败，则返回 null 。\n\t\tBeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n\t\tif (bdHolder != null) {\n\t\t    // 进行自定义标签处理\n\t\t\tbdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n\t\t\ttry {\n\t\t\t    // 进行 BeanDefinition 的注册\n\t\t\t\t// Register the final decorated instance.\n\t\t\t\tBeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n\t\t\t} catch (BeanDefinitionStoreException ex) {\n\t\t\t\tgetReaderContext().error("Failed to register bean definition with name \'" +\n\t\t\t\t\t\tbdHolder.getBeanName() + "\'", ele, ex);\n\t\t\t}\n\t\t\t// 发出响应事件，通知相关的监听器，已完成该 Bean 标签的解析。\n\t\t\t// Send registration event.\n\t\t\tgetReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n\t\t}\n\t}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br")])]),t("hr"),e._v(" "),t("h2",{attrs:{id:"beanname注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanname注册"}},[e._v("#")]),e._v(" beanName注册")]),e._v(" "),t("p",[e._v("BeanDefinitionReaderUtils.registerBeanDefinition();最终会"),t("strong",[e._v("注册到")]),e._v("\nprivate final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);")]),e._v(" "),t("h2",{attrs:{id:"bean标签注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean标签注册"}},[e._v("#")]),e._v(" bean标签注册")]),e._v(" "),t("p",[e._v("getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("可以看到spring中使用了很多的设计模式, 有效的提高了代码的可维护性及可读性.在beanname注册时调用静态方法,而在bean标签注册时则使用监听器模式.")])])}),[],!1,null,null,null);n.default=a.exports}}]);